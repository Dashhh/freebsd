.Dd June 26, 2016
.Dt CNV 9
.Os
.Sh NAME
.Nm cnvlist_get,
.Nm cnvlist_take,
.Nm cnvlist_free,
.Nd "API for managing name/value pairs  by cookie "
.Sh LIBRARY
.Lb libnv
.Sh SYNOPSIS
.In cnv.h
.Ft bool
.Fn cnvlist_get_bool "void *cookiep"
.Ft uint64_t
.Fn cnvlist_get_number "void *cookiep"
.Ft "const char *"
.Fn cnvlist_get_string "void *cookiep"
.Ft "const nvlist_t *"
.Fn cnvlist_get_nvlist "void *cookiep"
.Ft "const void *"
.Fn cnvlist_get_binary "void *cookiep" "size_t *sizep"
.Ft "const bool *"
.Fn cnvlist_get_bool_array "void *cookiep" "size_t *nitemsp"
.Ft "const uint64_t *"
.Fn cnvlist_get_number_array "void *cookiep" "size_t *nitemsp"
.Ft "const char * const *"
.Fn cnvlist_get_string_array "void *cookiep" "size_t *nitemsp"
.Ft "const nvlist_t * const *"
.Fn cnvlist_get_nvlist_array "void *cookiep" "size_t *nitemsp"
.Ft int
.Fn cnvlist_get_descriptor "void *cookiep"
.Ft "const int *"
.Fn cnvlist_get_descriptor_array "void *cookiep" "size_t *nitemsp"
.\"
.Ft bool
.Fn cnvlist_take_bool "void *cookiep"
.Ft uint64_t
.Fn cnvlist_take_number "void *cookiep"
.Ft "const char *"
.Fn cnvlist_take_string "void *cookiep"
.Ft "const nvlist_t *"
.Fn cnvlist_take_nvlist "void *cookiep"
.Ft "const void *"
.Fn cnvlist_take_binary "void *cookiep" "size_t *sizep"
.Ft "const bool *"
.Fn cnvlist_take_bool_array "void *cookiep" "size_t *nitemsp";
.Ft "const uint64_t *"
.Fn cnvlist_take_number_array "void *cookiep" "size_t *nitemsp";
.Ft "const char * const *"
.Fn cnvlist_take_string_array "void *cookiep" "size_t *nitemsp";
.Ft "const nvlist_t * const *"
.Fn cnvlist_take_nvlist_array "void *cookiep" "size_t *nitemsp";
.Ft int
.Fn cnvlist_take_descriptor "void *cookiep"
.Ft "const int *'
.Fn cnvlist_take_descriptor_array "void *cookiep" "size_t *nitemsp";
.\"
.Ft void
.Fn cnvlist_free_null "nvlist_t *nvl" "void *cookiep"
.Ft void
.Fn cnvlist_free_bool "nvlist_t *nvl" "void *cookiep"
.Ft void
.Fn cnvlist_free_number "nvlist_t *nvl" "void *cookiep"
.Ft void
.Fn cnvlist_free_string "nvlist_t *nvl" "void *cookiep"
.Ft void
.Fn cnvlist_free_nvlist "nvlist_t *nvl" "void *cookiep"
.Ft void
.Fn cnvlist_free_descriptor "nvlist_t *nvl" "void *cookiep"
.Ft void
.Fn cnvlist_free_binary "nvlist_t *nvl" "void *cookiep"
.Ft void
.Fn cnvlist_free_bool_array "nvlist_t *nvl" "void *cookiep"
.Ft void
.Fn cnvlist_free_number_array "nvlist_t *nvl" "void *cookiep"
.Ft void
.Fn cnvlist_free_string_array "nvlist_t *nvl" "void *cookiep"
.Ft void
.Fn cnvlist_free_nvlist_array "nvlist_t *nvl" "void *cookiep"
.Ft void
.Fn cnvlist_free_descriptor_array "nvlist_t *nvl" "void *cookiep"
.Sh DESCRIPTION
The
.Nm libnv
librcary allows to easily manage name value pairs as well as send and receive
them over sockets. For detailed information check
.Xr nv 9 .
.Pp
In order to understand the idea of cookie, please read
.Fn nvlist_next ,
.Fn nvlist_get_parent ,
.Fn nvlist_get_pararr
from
.Xr nv 9
.Pp
The
.Nm cnvlist_get 
family functions allow to obtain value of the given cookie.
In case of string, nvlist, descriptor, binary or any array, returned resource should
not be modified - it still belongs to the nvlist.
The nvlist must not be in error state.
.Pp
The
.Nm cnvlist_take
family functions return value associated with the given cookie and remove the element
from the nvlist.
In case of string, binary or any array values, the caller is responsible for freeing returned
memory using the
.Xr free 3
function.
In case of nvlist, the caller is responsible for destroying returned nvlist
using the
.Fn cnvlist_destroy
function.
In case of descriptor, the caller is responsible for closing returned descriptor
using the
.Fn close 2
system call.
If element of the given name does not exist, the program will be aborted.
.Pp
The
.Nm nvlist_free
family functions remove element of the given cookie and the given type determined by the
function name from the nvlist and free all resources associated with it.
If element of the given name and the given type does not exist, the program
will be aborted.
.Sh SEE ALSO
.Xr nv 9 ,
.Xr close 2 ,
.Xr free 3
.Sh AUTHORS
.An -nosplit
The
.Nm cnv
API was created during Google Summer Of Code 2016 by
.An Adam Starak Aq starak.adam@gmail.com
